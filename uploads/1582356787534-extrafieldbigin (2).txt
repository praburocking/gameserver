<%-- $Id$--%>
<%@page import="com.zoho.crm.core.entity.util.CrmModuleConstants"%>
<%@page import="com.zoho.crm.core.security.util.LicenseUtil"%>
<%@page import="com.adventnet.ds.query.QueryConstants" %>
<%@page import="com.zoho.crm.core.meta.tabs.TabUtil"%>
<%@page import="com.adventnet.sas.ds.SASThreadLocal"%>
<%@page import="com.adventnet.crm.ignite.util.CrmIgniteUtil"%>
<%@page import="com.zoho.crm.core.meta.fields.FieldUtil"%>
<%@ page contentType="text/html; charset=UTF-8" language="java"	errorPage="/jsp/common/Failure.jsp" import="java.util.*"%>
<%@page import="com.adventnet.crm.common.util.PersistenceCacheUtil"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMMODEFIELD"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMFIELD"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMPOTENTIAL"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMOPPORTUNITYSTAGE"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMOPPSTAGELAYOUTREL"%>
<%@page	import="com.adventnet.crm.customization.fields.util.CrmFieldUtil"%>
<%@page	import="com.adventnet.crm.customization.fields.util.FieldDependencyUtil"%>
<%@page	import="com.adventnet.crm.customization.relatedlist.util.RelatedListUtil"%>
<%@page import="com.adventnet.persistence.DataObject"%>
<%@page import="com.adventnet.persistence.Row"%>
<%@page import="com.adventnet.persistence.Persistence"%>
<%@page import="java.lang.Exception"%>
<%@page import="com.adventnet.ds.query.Column"%>
<%@page import="com.adventnet.ds.query.Criteria"%>
<%@page import="com.adventnet.ds.query.QueryConstants"%>
<%@page import="com.adventnet.ds.query.SelectQuery"%>
<%@page import="com.adventnet.ds.query.SelectQueryImpl"%>
<%@page import="com.adventnet.ds.query.Table"%>
<%@page import="java.io.BufferedReader"%>
<%@page import="java.io.FileReader"%>
<%@page import="java.io.FileWriter"%>
<%@page import="java.io.PrintWriter"%>
<%@page import="java.io.File"%>
<%@page import="com.adventnet.ds.query.Range"%>
<%@page import="com.adventnet.ds.query.UpdateQuery"%>
<%@page import="com.adventnet.ds.query.Join"%>
<%@page import="com.adventnet.ds.query.UpdateQueryImpl"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMSECTION"%>
<%@page	import="com.adventnet.crm.customization.section.util.SectionUtil"%>
<%-- <%@page import="com.adventnet.crm.security.util.UserUtil"%> --%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="com.adventnet.crm.api.v2.commons.CrmModules"%>
<%@page import="com.adventnet.crm.api.v2.commons.CrmUsers"%>
<%@page import="com.zoho.crm.core.security.util.OrgUtil"%>
<%@page import="com.adventnet.crm.common.util.CrmConstants"%>
<%@page	import="com.adventnet.crm.custommodule.handler.CustomModuleHandler"%>
<%@page import="com.adventnet.crm.custommodule.util.CustomModuleJsonValidate"%>
<%@page import="com.adventnet.crm.authorization.util.SecurityUtil"%>
<%@page import="com.adventnet.crm.iam.util.ZohoCRMIAMUtil"%>
<%@page import="java.util.HashSet"%>
<%@page import="com.adventnet.iam.ServiceOrgAPI"%>
<%@page import="com.zoho.accounts.AccountsConstants"%>
<%@page import="com.adventnet.iam.ServiceOrg"%>
<%@page import="com.zoho.crm.core.security.util.CrmEnvironment"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMPICKLISTLAYOUTREL"%>
<%@page import="java.util.logging.Logger"%>
<%@page import="java.util.logging.Level"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMLAYOUTFIELDPROPERTIES"%>
<%@page import="com.zoho.crm.core.meta.layouts.PageLayoutUtil"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMPICKLISTVALUES"%>
<%@page import="com.adventnet.crm.common.util.ComboDBService"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMPICKLISTLAYOUTREL"%>
<%@page import="com.adventnet.adventnetcrmsfa.CRMTAB"%>
<%@page import="com.adventnet.iam.IAMProxy"%>
<%@page import="com.adventnet.iam.UserAPI"%>
<%@page import="com.adventnet.iam.User"%>
<%@page import="com.zoho.crm.core.meta.fields.CoreFieldConstants"%>
<%@page import="com.zoho.crm.core.constants.PMDConstants"%>
<%@page import="com.adventnet.persistence.DataAccessException"%>
<%@page import="com.adventnet.crm.activities.calls.NewCallsViewMigrator"%>
<%@page import="com.adventnet.crm.ignite.util.CrmIgniteUtil"%>
<%

try{
	
final Logger LOGGER = Logger.getLogger("BiginNewfields");//No i18N
String[] email_Ids={
	"prabu.mohan@zohocorp.com","lokesh.sr+biginnov20p1@zohocorp.com","lokesh.sr+biginmay28@zohocorp.com","sathish.m@zohocorp.com","prabu.mohan+ignitetest31@zohocorp.com","prabu.mohan+ignitetest4@zohocorp.com","prabu.mohan+ignitetest61@zohocorp.com","prabu.mohan+sept5@zohocorp.com","prabu.mohan+sept5p0@zohocorp.com","venkateswaran.s@zohocorp.com","prabu.mohan+nov25p1@zohocorp.com","akshaya.v+bigintest17@zohocorp.com","akshaya.v+bigintest16@zohocorp.com","akshaya.v+bigintest15@zohocorp.com","akshaya.v+bigintest18@zohocorp.com","prabu.mohan+aug27p0@zohocorp.com","prabu.mohan@zohocorp.com","prabu.mohan+aug8p0@zohocorp.com","prabu.mohan+igbigin1p1@zohocorp.com","prabu.mohan+9knkn@zohocorp.com","prabu.mohan+sept5@zohocorp.com","vivek.sb@zohocorp.com","venkateswaran.s+bigin145@zohocorp.com","lokesh.sr@zohocorp.com","ponmala.k@zohocorp.com","arunkumar.g@zohocorp.com","prabu.mohan+dec18p0@zohocorp.com","prabu.mohan+dec18p1@zohocorp.com","prabu.mohan+dec18p2@zohocorp.com","akshaya.v+bigincrm71@zohocorp.com","akshaya.v+bigincrm72@zohocorp.com","akshaya.v+bigincrm74@zohocorp.com",
		"akshaya.v+bigincrm77@zohocorp.com","prabu.mohan@zohocorp.com","akshaya.v@zohocorp.com","prabu.mohan+bigin1jan17@zohocorp.com", "prabu.mohan+bigin2jan17@zohocorp.com", "prabu.mohan+bigin3jan17@zohocorp.com"//No i18N
};	//No i18N 

IAMProxy iamProxy = IAMProxy.getInstance();
UserAPI userAPI = iamProxy.getUserAPI();
ServiceOrgAPI serviceOrgAPI = ZohoCRMIAMUtil.getServiceOrgAPI();
HashSet zgidList=new HashSet();
for(String email_id : email_Ids)
{
	try {
		User user=userAPI.getUser(email_id);
		if(user!=null && user.isActive())
		{
    	List<ServiceOrg> serviceOrgList = serviceOrgAPI.getAllServiceOrgs(AccountsConstants.ServiceOrgType.CRM.getType(), user.getZUID());
    	ServiceOrg[] orgs = serviceOrgList != null && !serviceOrgList.isEmpty() ? serviceOrgList.toArray(new ServiceOrg[0]) : null;
	if (serviceOrgList != null && !serviceOrgList.isEmpty()) {
		List<ServiceOrg> envList = ZohoCRMIAMUtil.getEnvironmentServiceorgs(CrmEnvironment.BIGIN, orgs);
        		if (envList != null && !envList.isEmpty()) {
			for (ServiceOrg serviceOrg : envList) {
        				String zgId = "" + serviceOrg.getZSOID();
        				if(zgId!=null){
        					zgidList.add(zgId);
        				}
			}
        		}
    	}
	}
 	} catch (Exception e) {
 		System.out.println("EXCEPTION IN GETTING IAM GROUP ID::"+e);//No i18N
 		LOGGER.log(Level.SEVERE,"EXCEPTION IN GETTING IAM GROUP ID::"+e);//No i18N	
 	}
	}

out.println("started all");//No I18N
out.println("zgids=> "+zgidList);  //No i18N
Iterator<String> it = zgidList.iterator();
while ( it.hasNext() )
{
    try{
	String zgid=it.next();
	System.out.println("running migration for => "+zgid);
	out.println("running migration for => "+zgid);//No i18N
	SASThreadLocal.setThreadLocalForDomain(zgid);
	modifyProductForFree(LicenseUtil.getLicenseType(),zgid,LOGGER);

				HashMap contactSeqMap=new HashMap();
				contactSeqMap.put("M_MODIFIEDTIME",34);
				contactSeqMap.put("M_RELACTIVITYTIME",35);
				contactSeqMap.put("A_MODIFIEDTIME",36);
				contactSeqMap.put("A_RELACTIVITYTIME",37);
				contactSeqMap.put("LAST_ACTION",38);
				contactSeqMap.put("LAST_ACTION_TIME",39);
				contactSeqMap.put("LAST_SENT_TIME",40);
				modifyModuleLayout(zgid,CrmModuleConstants.CONTACTS,contactSeqMap,LOGGER);
				
				HashMap accountSeqMap=new HashMap();
				accountSeqMap.put("M_MODIFIEDTIME",23);
				accountSeqMap.put("M_RELACTIVITYTIME",24);
				accountSeqMap.put("A_MODIFIEDTIME",25);
				accountSeqMap.put("A_RELACTIVITYTIME",26);
				modifyModuleLayout(zgid,CrmModuleConstants.ACCOUNTS,accountSeqMap,LOGGER);
				
				HashMap dealSeqMap=new HashMap();
				dealSeqMap.put("M_MODIFIEDTIME",22);
				dealSeqMap.put("M_RELACTIVITYTIME",23);
				dealSeqMap.put("A_MODIFIEDTIME",24);
				dealSeqMap.put("A_RELACTIVITYTIME",25);
				dealSeqMap.put("LAST_ACTION",26);
				dealSeqMap.put("LAST_ACTION_TIME",27);
				dealSeqMap.put("LAST_SENT_TIME",28);
				modifyModuleLayout(zgid,CrmModuleConstants.POTENTIALS,dealSeqMap,LOGGER);
				
				HashMap taskSeqMap=new HashMap();
				taskSeqMap.put("M_MODIFIEDTIME",28);
				taskSeqMap.put("M_RELACTIVITYTIME",29);
				taskSeqMap.put("A_MODIFIEDTIME",30);
				taskSeqMap.put("A_RELACTIVITYTIME",31);
				modifyModuleLayout(zgid,CrmModuleConstants.TASKS,taskSeqMap,LOGGER);
				
				HashMap eventSeqMap=new HashMap();
				eventSeqMap.put("M_MODIFIEDTIME",35);
				eventSeqMap.put("M_RELACTIVITYTIME",36);
				eventSeqMap.put("A_MODIFIEDTIME",37);
				eventSeqMap.put("A_RELACTIVITYTIME",38);
				 modifyModuleLayout(zgid,CrmModuleConstants.EVENTS,eventSeqMap,LOGGER);
				 
				 HashMap productSeqMap=new HashMap();
				 productSeqMap.put("M_MODIFIEDTIME",16);
				 productSeqMap.put("M_RELACTIVITYTIME",17);
				 productSeqMap.put("A_MODIFIEDTIME",18);
				 productSeqMap.put("A_RELACTIVITYTIME",19);
				 modifyModuleLayout(zgid,CrmModuleConstants.PRODUCTS,productSeqMap,LOGGER);
    }
    catch(Exception ex)
    {
        out.println("Exception while running migration for "+zgid);
    }
}
}
catch(Exception ex)
{ 
	out.println("Exception in migration"+ex); //NO i18N
	}

	%>
	


	<%!
	public void modifyModuleLayout(String zgid,String module,HashMap seqMap,Logger LOGGER) throws Exception{
		try{
			
			Persistence per = PersistenceCacheUtil.getPersistenceLiteHandle(zgid);
			DataObject fielddObj=FieldUtil.getFieldsDOForModule(module, zgid);
			if(fielddObj!=null && !fielddObj.isEmpty()){
				String tabId=""+fielddObj.getRow(CRMFIELD.TABLE).get(CRMFIELD.TABID);
				Long layoutId=PageLayoutUtil.getSystemdefinedActiveLayout(Long.parseLong(tabId),zgid);
				HashMap<String, Long> sectionPKVsSection_ID = SectionUtil.getSectionPKVsSection_IDMap(Long.valueOf(tabId), layoutId, null, zgid);
				Long section_IdForSection1 = null;
				
				if(sectionPKVsSection_ID != null){
					String pkKey = new StringBuilder().append(layoutId).append('_').append(CrmConstants.LAYOUT_DEFAULTMODE).append('_').append(1L).toString();
					section_IdForSection1 = sectionPKVsSection_ID.get(pkKey);
				}
				
				//HashMap<Long, String> fieldMap=new HashMap<Long, String>();
				if(fielddObj!=null && !fielddObj.isEmpty()){
					Iterator fieldItr=fielddObj.getRows(CRMFIELD.TABLE);
					while(fieldItr.hasNext()){
						Row fieldRow=(Row) fieldItr.next();
						if(seqMap.containsKey(fieldRow.get(CRMFIELD.COLUMNNAME).toString())){
							//fieldMap.put(Long.parseLong(fieldRow.get(CRMFIELD.FIELDID).toString()), fieldRow.get(CRMFIELD.COLUMNNAME).toString());
							seqMap.put(Long.parseLong(fieldRow.get(CRMFIELD.FIELDID).toString()), seqMap.get(fieldRow.get(CRMFIELD.COLUMNNAME).toString()));
							seqMap.remove(fieldRow.get(CRMFIELD.COLUMNNAME).toString());
						}
					}
					LOGGER.log(Level.INFO, "altered seqmap {0}",seqMap);

					SelectQuery sQry = new SelectQueryImpl(Table.getTable(CRMMODEFIELD.TABLE));
					sQry.addSelectColumn( Column.getColumn(null,"*") );
					Criteria modcr=new Criteria(Column.getColumn(CRMMODEFIELD.TABLE, CRMMODEFIELD.TABID), tabId , QueryConstants.EQUAL);
					sQry.setCriteria(modcr);
					DataObject modfieldObj = per.get(sQry);
					if(modfieldObj!=null && !modfieldObj.isEmpty()){
						modcr=new Criteria(Column.getColumn(CRMMODEFIELD.TABLE, CRMMODEFIELD.FIELDID), seqMap.keySet().toArray() , QueryConstants.IN);
						DataObject fieldsToAdd=modfieldObj.getDataObject(CRMMODEFIELD.TABLE, modcr);
						LOGGER.log(Level.INFO, "Fields To Add DO => {0}",fieldsToAdd);
						LOGGER.log(Level.INFO, "fieldsToAdd size=> {0}",fieldsToAdd.size(CRMMODEFIELD.TABLE)==0);
						if(fieldsToAdd.isEmpty() || fieldsToAdd.size(CRMMODEFIELD.TABLE)<1){
							for(Object fieldid : seqMap.keySet())
							{
							Row newField=new Row(CRMMODEFIELD.TABLE);
							newField.set(CRMMODEFIELD.ELEMENT_TYPE, 1);
							newField.set(CRMMODEFIELD.FIELDID, (Long)fieldid);
							newField.set(CRMMODEFIELD.FIELDSEQUENCE, seqMap.get(fieldid));
							newField.set(CRMMODEFIELD.LAYOUTID , layoutId);
							newField.set(CRMMODEFIELD.TABID,tabId);
							newField.set(CRMMODEFIELD.MODE , 2);
							newField.set(CRMMODEFIELD.SECTION_ID , section_IdForSection1);
							newField.set(CRMMODEFIELD.SECTIONID , 1);
							newField.set(CRMMODEFIELD.WIZARDID , null);
							LOGGER.log(Level.INFO, "adding fields for "+module+" field row "+newField);
							modfieldObj.addRow(newField);
							}
							modfieldObj=per.update(modfieldObj);
							LOGGER.log(Level.INFO, "modfieldObj after updat=> "+modfieldObj);
						}			
						
					}
				}
			}
		}catch(Exception e){
			
			LOGGER.log(Level.SEVERE, "Exception occurred while editing default contacts layout for Ignite user ::"+e);
		
		}
	}
%>
<%!
public void modifyProductForFree(String licenseType,String zgid,Logger LOGGER) throws Exception
	{
	  try{
	 		 if( "B".equalsIgnoreCase(licenseType))	//If The user is in Free License
	 		{	
	 			  HashMap listMap=new HashMap();
				  listMap.put("PRODUCTSPERSONALITY", 6); //No i18N
				  Long dealsTabId = TabUtil.getTabIdByName(CrmModuleConstants.POTENTIALS);
				  LOGGER.log(Level.INFO, "product module added to deals ");
				  RelatedListUtil.updateRelatedList(listMap,dealsTabId);
//				  Criteria cr = new Criteria(Column.getColumn(CRMLISTSRELATION.TABLE, CRMLISTSRELATION.TABID), tabid, QueryConstants.EQUAL);
//					DataObject listObj=per.get(CRMLISTSRELATION.TABLE, cr);
	 		}
	  }
	  catch(Exception exp)
	  {
		  LOGGER.log(Level.INFO,"exception while enabling products related list");
	  }
	}
%>